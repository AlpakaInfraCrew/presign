# Generated by Django 4.1.5 on 2023-02-19 19:14

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import model_clone.mixin
import simple_history.models

import presign.base.fields
import presign.base.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", presign.base.fields.I18nCharField(max_length=50)),
                ("slug", models.SlugField()),
                (
                    "description",
                    presign.base.fields.I18nTextField(blank=True, default=""),
                ),
                ("enabled", models.BooleanField(default=False)),
                ("event_date", presign.base.fields.DateTimeLocalModelField()),
                (
                    "signup_start",
                    presign.base.fields.DateTimeLocalModelField(null=True),
                ),
                (
                    "signup_end_shown",
                    presign.base.fields.DateTimeLocalModelField(
                        null=True, verbose_name="Shown Signup End"
                    ),
                ),
                ("signup_end", presign.base.fields.DateTimeLocalModelField(null=True)),
                ("lock_date", presign.base.fields.DateTimeLocalModelField(null=True)),
                ("status_texts", models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name="Organizer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                ("name", presign.base.fields.I18nCharField(max_length=50)),
                ("members", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Participant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "code",
                    models.CharField(
                        default=presign.base.models.generate_participant_code,
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "secret",
                    models.CharField(
                        default=presign.base.models.generate_participant_secret,
                        max_length=32,
                        unique=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("NEW", "New signup"),
                            ("REJ", "Rejected"),
                            ("Q1C", "Changes requested in questionnaire 1"),
                            ("APP", "Approved"),
                            ("NER", "Needs review"),
                            ("Q2C", "Changes requested in questionnaire 2"),
                            ("CON", "Confirmed"),
                            ("WIT", "Withdrawn"),
                            ("CAN", "Cancelled"),
                        ],
                        default="NEW",
                        max_length=3,
                    ),
                ),
                (
                    "public_comment",
                    presign.base.fields.I18nTextField(
                        blank=True,
                        help_text="This text <strong>will be shown to the participant</strong> on their overview page. You can for example use it for requesting more information.",
                        null=True,
                    ),
                ),
                (
                    "internal_comment",
                    presign.base.fields.I18nTextField(
                        blank=True,
                        help_text="The text entered in this field will <em>not</em> be shown to the participant.",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.event"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("N", "Number"),
                            ("S", "Text (one line)"),
                            ("TX", "Multiline text"),
                            ("B", "Yes/No"),
                            ("C", "Choose one from a list"),
                            ("M", "Choose multiple from a list"),
                            ("F", "File upload"),
                            ("D", "Date"),
                            ("TI", "Time"),
                            ("DT", "Date and time"),
                            ("PN", "Phone number"),
                            ("EM", "Email address"),
                        ],
                        max_length=2,
                    ),
                ),
                ("required", models.BooleanField()),
                ("name", presign.base.fields.I18nCharField(max_length=255)),
                ("help", presign.base.fields.I18nTextField(blank=True)),
                ("order", models.PositiveBigIntegerField()),
            ],
            options={
                "ordering": ("order", "name"),
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="QuestionOption",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "value",
                    presign.base.fields.I18nCharField(
                        max_length=255, verbose_name="Value"
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        limit_choices_to={"kind__in": ["M", "C"]},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="base.question",
                    ),
                ),
            ],
            options={
                "ordering": ("order",),
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Questionnaire",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", presign.base.fields.I18nCharField(max_length=100)),
                ("is_public", models.BooleanField(default=False)),
                (
                    "organizer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.organizer"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="QuestionBlock",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", presign.base.fields.I18nCharField(max_length=100)),
                ("order", models.IntegerField()),
                (
                    "questionnaire",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.questionnaire",
                    ),
                ),
            ],
            options={
                "ordering": ("questionnaire", "order", "name"),
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="QuestionAnswer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("answer", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("changed_at", models.DateTimeField(auto_now=True)),
                ("file", models.FileField(null=True, upload_to="")),
                (
                    "options",
                    models.ManyToManyField(blank=True, to="base.questionoption"),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.participant",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.question"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="question",
            name="block",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.questionblock"
            ),
        ),
        migrations.CreateModel(
            name="HistoricalUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical user",
                "verbose_name_plural": "historical users",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalQuestionOption",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "value",
                    presign.base.fields.I18nCharField(
                        max_length=255, verbose_name="Value"
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to={"kind__in": ["M", "C"]},
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.question",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical question option",
                "verbose_name_plural": "historical question options",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalQuestionnaire",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("name", presign.base.fields.I18nCharField(max_length=100)),
                ("is_public", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.organizer",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical questionnaire",
                "verbose_name_plural": "historical questionnaires",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalQuestionBlock",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("name", presign.base.fields.I18nCharField(max_length=100)),
                ("order", models.IntegerField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "questionnaire",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.questionnaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical question block",
                "verbose_name_plural": "historical question blocks",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalQuestionAnswer",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("answer", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("changed_at", models.DateTimeField(blank=True, editable=False)),
                ("file", models.TextField(max_length=100, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.participant",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.question",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical question answer",
                "verbose_name_plural": "historical question answers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("N", "Number"),
                            ("S", "Text (one line)"),
                            ("TX", "Multiline text"),
                            ("B", "Yes/No"),
                            ("C", "Choose one from a list"),
                            ("M", "Choose multiple from a list"),
                            ("F", "File upload"),
                            ("D", "Date"),
                            ("TI", "Time"),
                            ("DT", "Date and time"),
                            ("PN", "Phone number"),
                            ("EM", "Email address"),
                        ],
                        max_length=2,
                    ),
                ),
                ("required", models.BooleanField()),
                ("name", presign.base.fields.I18nCharField(max_length=255)),
                ("help", presign.base.fields.I18nTextField(blank=True)),
                ("order", models.PositiveBigIntegerField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "block",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.questionblock",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical question",
                "verbose_name_plural": "historical questions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalParticipant",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        default=presign.base.models.generate_participant_code,
                        max_length=10,
                    ),
                ),
                (
                    "secret",
                    models.CharField(
                        db_index=True,
                        default=presign.base.models.generate_participant_secret,
                        max_length=32,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("NEW", "New signup"),
                            ("REJ", "Rejected"),
                            ("Q1C", "Changes requested in questionnaire 1"),
                            ("APP", "Approved"),
                            ("NER", "Needs review"),
                            ("Q2C", "Changes requested in questionnaire 2"),
                            ("CON", "Confirmed"),
                            ("WIT", "Withdrawn"),
                            ("CAN", "Cancelled"),
                        ],
                        default="NEW",
                        max_length=3,
                    ),
                ),
                (
                    "public_comment",
                    presign.base.fields.I18nTextField(
                        blank=True,
                        help_text="This text <strong>will be shown to the participant</strong> on their overview page. You can for example use it for requesting more information.",
                        null=True,
                    ),
                ),
                (
                    "internal_comment",
                    presign.base.fields.I18nTextField(
                        blank=True,
                        help_text="The text entered in this field will <em>not</em> be shown to the participant.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.event",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical participant",
                "verbose_name_plural": "historical participants",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalOrganizer",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("slug", models.SlugField()),
                ("name", presign.base.fields.I18nCharField(max_length=50)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical organizer",
                "verbose_name_plural": "historical organizers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEventQuestionnaire",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "role",
                    models.IntegerField(
                        choices=[(1, "During Signup"), (2, "After Approval")]
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.event",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "questionnaire",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.questionnaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical event questionnaire",
                "verbose_name_plural": "historical event questionnaires",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("name", presign.base.fields.I18nCharField(max_length=50)),
                ("slug", models.SlugField()),
                (
                    "description",
                    presign.base.fields.I18nTextField(blank=True, default=""),
                ),
                ("enabled", models.BooleanField(default=False)),
                ("event_date", presign.base.fields.DateTimeLocalModelField()),
                (
                    "signup_start",
                    presign.base.fields.DateTimeLocalModelField(null=True),
                ),
                (
                    "signup_end_shown",
                    presign.base.fields.DateTimeLocalModelField(
                        null=True, verbose_name="Shown Signup End"
                    ),
                ),
                ("signup_end", presign.base.fields.DateTimeLocalModelField(null=True)),
                ("lock_date", presign.base.fields.DateTimeLocalModelField(null=True)),
                ("status_texts", models.JSONField(default=dict)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="base.organizer",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical event",
                "verbose_name_plural": "historical events",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="EventQuestionnaire",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.IntegerField(
                        choices=[(1, "During Signup"), (2, "After Approval")]
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.event"
                    ),
                ),
                (
                    "questionnaire",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.questionnaire",
                    ),
                ),
            ],
            options={
                "ordering": ("role",),
            },
        ),
        migrations.AddField(
            model_name="event",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.organizer"
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="questionnaires",
            field=models.ManyToManyField(
                related_name="events",
                through="base.EventQuestionnaire",
                to="base.questionnaire",
            ),
        ),
        migrations.AddConstraint(
            model_name="questionanswer",
            constraint=models.UniqueConstraint(
                models.F("participant"),
                models.F("question"),
                name="unique_participant_question",
            ),
        ),
        migrations.AddConstraint(
            model_name="organizer",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("slug"),
                name="unique_organizer_lower_slug",
            ),
        ),
        migrations.AddConstraint(
            model_name="eventquestionnaire",
            constraint=models.UniqueConstraint(
                models.F("event"),
                models.F("role"),
                name="one_questionnaire_per_event_and_role",
            ),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("slug"),
                models.F("organizer"),
                name="unique_event_slug_per_organizer",
            ),
        ),
    ]
